#!/usr/bin/env bash
# This script was generated by bashly 1.1.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
labman_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman - Access Management application\n"
    echo

  else
    printf "labman - Access Management application\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman COMMAND\n"
  printf "  labman [COMMAND] --help | -h\n"
  printf "  labman --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Setup database with default tables\n" "initialize_db       "
  printf "  %s   Add new object\n" "add                 "
  printf "  %s   Remove object\n" "remove              "
  printf "  %s   Add user to group\n" "addusertogroup      "
  printf "  %s   Remove user from group\n" "removeuserfromgroup "
  printf "  %s   Set allowed time for user\n" "set_allowedtime     "
  printf "  %s   Generate time.conf settings based on database entries\n" "generate_time_config"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
labman_initialize_db_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman initialize_db - Setup database with default tables\n"
    echo

  else
    printf "labman initialize_db - Setup database with default tables\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman initialize_db\n"
  printf "  labman initialize_db --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add - Add new object\n"
    echo

  else
    printf "labman add - Add new object\n"
    echo

  fi

  printf "Alias: create\n"
  echo

  printf "%s\n" "Usage:"
  printf "  labman add COMMAND\n"
  printf "  labman add [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Add new user\n" "user "
  printf "  %s   Add new group\n" "group"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_add_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add user - Add new user\n"
    echo

  else
    printf "labman add user - Add new user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman add user USER\n"
  printf "  labman add user --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User name\n"
    echo

  fi
}

# :command.usage
labman_add_group_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add group - Add new group\n"
    echo

  else
    printf "labman add group - Add new group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman add group GROUP\n"
  printf "  labman add group --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group name\n"
    echo

  fi
}

# :command.usage
labman_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove - Remove object\n"
    echo

  else
    printf "labman remove - Remove object\n"
    echo

  fi

  printf "Alias: delete\n"
  echo

  printf "%s\n" "Usage:"
  printf "  labman remove COMMAND\n"
  printf "  labman remove [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Remove user\n" "user "
  printf "  %s   Remove group\n" "group"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_remove_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove user - Remove user\n"
    echo

  else
    printf "labman remove user - Remove user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman remove user USER\n"
  printf "  labman remove user --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User name\n"
    echo

  fi
}

# :command.usage
labman_remove_group_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove group - Remove group\n"
    echo

  else
    printf "labman remove group - Remove group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman remove group GROUP\n"
  printf "  labman remove group --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group name\n"
    echo

  fi
}

# :command.usage
labman_addusertogroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman addusertogroup - Add user to group\n"
    echo

  else
    printf "labman addusertogroup - Add user to group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman addusertogroup USER GROUP\n"
  printf "  labman addusertogroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User to be added to group\n"
    echo

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group to add user to\n"
    echo

  fi
}

# :command.usage
labman_removeuserfromgroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman removeuserfromgroup - Remove user from group\n"
    echo

  else
    printf "labman removeuserfromgroup - Remove user from group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman removeuserfromgroup USER GROUP\n"
  printf "  labman removeuserfromgroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User to be removed from group\n"
    echo

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group to remove user from\n"
    echo

  fi
}

# :command.usage
labman_set_allowedtime_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman set_allowedtime - Set allowed time for user\n"
    echo

  else
    printf "labman set_allowedtime - Set allowed time for user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman set_allowedtime USER ALLOWEDTIME\n"
  printf "  labman set_allowedtime --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    Affected user\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDTIME"
    printf "    Allowed time for user\n"
    echo

  fi
}

# :command.usage
labman_generate_time_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman generate_time_config - Generate time.conf settings based on database entries\n"
    echo

  else
    printf "labman generate_time_config - Generate time.conf settings based on database entries\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman generate_time_config [OPTIONS]\n"
  printf "  labman generate_time_config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--print, -p"
    printf "    Print generated time.conf output\n"
    echo

    # :flag.usage
    printf "  %s\n" "--sync, -s"
    printf "    Sync time.conf on managed machines\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
labman_initialize_db_command() {
  # src/initialize_db_command.sh
  sqlite3 labman.db "create table user_allowedtime(username text unique, allowedtime text);"
}

# :command.function
labman_add_user_command() {
  # src/add_user_command.sh
  user=${args[user]}

  ldapaddgroup $user
  ldapadduser $user $user
  ldapaddusertogroup $user administrators
}

# :command.function
labman_add_group_command() {
  # src/add_group_command.sh
  group=${args[group]}

  ldapaddgroup $group

}

# :command.function
labman_remove_user_command() {
  # src/remove_user_command.sh
  user=${args[user]}

  sqlite3 labman.db "delete from user_allowedtime where username='$user';"
  ldapdeletegroup $user
  ldapdeleteuser $user
}

# :command.function
labman_remove_group_command() {
  # src/remove_group_command.sh
  group=${args[group]}

  ldapdeletegroup $group

}

# :command.function
labman_addusertogroup_command() {
  # src/addusertogroup_command.sh
  user=${args[user]}
  group=${args[group]}

  ldapaddusertogroup $user $group

}

# :command.function
labman_removeuserfromgroup_command() {
  # src/removeuserfromgroup_command.sh
  user=${args[user]}
  group=${args[group]}

  ldapdeleteuserfromgroup $user $group

}

# :command.function
labman_set_allowedtime_command() {
  # src/set_allowedtime_command.sh
  parse_allowedtime() {
      local allowedtime="$1"

      if [ "$allowedtime" = "always" ]; then
          allowedtime="Al0000-2400"
      elif [ "$allowedtime" = "never" ]; then
          allowedtime="!Al0000-2400"
      elif [[ "$allowedtime" =~ ^[0-9]{4}-[0-9]{4}$ ]]; then
          allowedtime="Al$allowedtime"
      else
          allowedtime="ERROR"
      fi

      echo $allowedtime
  }

  user=${args[user]}
  allowedtime=${args[allowedtime]}
  parsed_allowedtime=$(parse_allowedtime $allowedtime)

  if [ "$parsed_allowedtime" != "ERROR" ]; then
      sqlite3 labman.db "insert or replace into user_allowedtime values('$user','$parsed_allowedtime');"

      echo "Successfully set user $user allowed time to $allowedtime"
  else
      echo "Wrong allowedtime format: $allowedtime"
      echo "Try these instead: always, never, 0800-1600(START-END)"
  fi
}

# :command.function
labman_generate_time_config_command() {
  # src/generate_time_config_command.sh
  generate_time_conf() {
      cp time.conf.sample time.conf

      for line in $(sqlite3 labman.db "select * from user_allowedtime;"); do
          IFS='|'
          read -ra userarr <<< "$line"
          user=${userarr[0]}
          allowedtime=${userarr[1]}
          echo -e "\n*;*;$user;$allowedtime" >> time.conf
      done

      echo -ne "\n# End of generated time.conf" >> time.conf
  }

  print=${args[--print]}
  sync=${args[--sync]}

  generate_time_conf

  echo "Updated time.conf file created"

  if [[ $print ]]; then
      cat time.conf
      echo
  fi

  if [[ $sync ]]; then
      ansible-playbook --ask-become-pass sync_time_conf.yml
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        labman_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser >/dev/null 2>&1; then
    deps['ldapadduser']="$(command -v ldapadduser | head -n1)"
  else
    printf "missing dependency: ldapadduser\n" >&2
    printf "%s\n" "install ldapscripts" >&2
    exit 1
  fi

  if command -v sqlite3 >/dev/null 2>&1; then
    deps['sqlite3']="$(command -v sqlite3 | head -n1)"
  else
    printf "missing dependency: sqlite3\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    initialize_db)
      action="initialize_db"
      shift
      labman_initialize_db_parse_requirements "$@"
      shift $#
      ;;

    add | create)
      action="add"
      shift
      labman_add_parse_requirements "$@"
      shift $#
      ;;

    remove | delete)
      action="remove"
      shift
      labman_remove_parse_requirements "$@"
      shift $#
      ;;

    addusertogroup)
      action="addusertogroup"
      shift
      labman_addusertogroup_parse_requirements "$@"
      shift $#
      ;;

    removeuserfromgroup)
      action="removeuserfromgroup"
      shift
      labman_removeuserfromgroup_parse_requirements "$@"
      shift $#
      ;;

    set_allowedtime)
      action="set_allowedtime"
      shift
      labman_set_allowedtime_parse_requirements "$@"
      shift $#
      ;;

    generate_time_config)
      action="generate_time_config"
      shift
      labman_generate_time_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_initialize_db_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_initialize_db_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="initialize_db"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_add_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    user)
      action="user"
      shift
      labman_add_user_parse_requirements "$@"
      shift $#
      ;;

    group)
      action="group"
      shift
      labman_add_group_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_add_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_add_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add user"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman add user USER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_add_group_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_group_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add group"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman add group GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    user)
      action="user"
      shift
      labman_remove_user_parse_requirements "$@"
      shift $#
      ;;

    group)
      action="group"
      shift
      labman_remove_group_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_remove_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_remove_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove user"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman remove user USER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_remove_group_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_group_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove group"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman remove group GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_addusertogroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_addusertogroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="addusertogroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        elif [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman addusertogroup USER GROUP\n" >&2
    exit 1
  fi
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman addusertogroup USER GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_removeuserfromgroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_removeuserfromgroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="removeuserfromgroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        elif [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman removeuserfromgroup USER GROUP\n" >&2
    exit 1
  fi
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman removeuserfromgroup USER GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_set_allowedtime_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_set_allowedtime_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="set_allowedtime"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        elif [[ -z ${args['allowedtime']+x} ]]; then
          args['allowedtime']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman set_allowedtime USER ALLOWEDTIME\n" >&2
    exit 1
  fi
  if [[ -z ${args['allowedtime']+x} ]]; then
    printf "missing required argument: ALLOWEDTIME\nusage: labman set_allowedtime USER ALLOWEDTIME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_generate_time_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_generate_time_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="generate_time_config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --print | -p)

        # :flag.case_no_arg
        args['--print']=1
        shift
        ;;

      # :flag.case
      --sync | -s)

        # :flag.case_no_arg
        args['--sync']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "initialize_db") labman_initialize_db_command ;;
    "add") labman_add_command ;;
    "add user") labman_add_user_command ;;
    "add group") labman_add_group_command ;;
    "remove") labman_remove_command ;;
    "remove user") labman_remove_user_command ;;
    "remove group") labman_remove_group_command ;;
    "addusertogroup") labman_addusertogroup_command ;;
    "removeuserfromgroup") labman_removeuserfromgroup_command ;;
    "set_allowedtime") labman_set_allowedtime_command ;;
    "generate_time_config") labman_generate_time_config_command ;;
  esac
}

initialize
run "$@"
