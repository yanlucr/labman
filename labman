#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
labman_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman - Access Management application\n"
    echo

  else
    printf "labman - Access Management application\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman COMMAND\n"
  printf "  labman [COMMAND] --help | -h\n"
  printf "  labman --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Run initial setup\n" "init                   "
  printf "  %s   Initalize consumers\n" "init_consumers         "
  printf "  %s   Add new object\n" "add                    "
  printf "  %s   Remove object\n" "remove                 "
  printf "  %s   Add user to group\n" "addusertogroup         "
  printf "  %s   Remove user from group\n" "removeuserfromgroup    "
  printf "  %s   Add user to timegroup\n" "addusertotimegroup     "
  printf "  %s   Remove user from timegroup\n" "removeuserfromtimegroup"
  printf "  %s   Set allowed time for users or timegroups\n" "set_allowedtime        "
  printf "  %s   Clear allowed time for users or timegroups\n" "clear_allowedtime      "
  printf "  %s   Generate time.conf settings based on database entries\n" "generate_time_config   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
labman_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman init - Run initial setup\n"
    echo

  else
    printf "labman init - Run initial setup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman init\n"
  printf "  labman init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_init_consumers_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman init_consumers - Initalize consumers\n"
    echo

  else
    printf "labman init_consumers - Initalize consumers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman init_consumers\n"
  printf "  labman init_consumers --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add - Add new object\n"
    echo

  else
    printf "labman add - Add new object\n"
    echo

  fi

  printf "Alias: create\n"
  echo

  printf "%s\n" "Usage:"
  printf "  labman add COMMAND\n"
  printf "  labman add [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Add new user\n" "user     "
  printf "  %s   Add new group\n" "group    "
  printf "  %s   Add new timegroup\n" "timegroup"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_add_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add user - Add new user\n"
    echo

  else
    printf "labman add user - Add new user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman add user USER\n"
  printf "  labman add user --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User name\n"
    echo

  fi
}

# :command.usage
labman_add_group_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add group - Add new group\n"
    echo

  else
    printf "labman add group - Add new group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman add group GROUP\n"
  printf "  labman add group --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group name\n"
    echo

  fi
}

# :command.usage
labman_add_timegroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman add timegroup - Add new timegroup\n"
    echo

  else
    printf "labman add timegroup - Add new timegroup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman add timegroup TIMEGROUP ALLOWEDTIME [ALLOWEDDAYS]\n"
  printf "  labman add timegroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TIMEGROUP"
    printf "    Timegroup name\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDTIME"
    printf "    Allowed time for user\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDDAYS"
    printf "    Allowed days\n"
    echo

  fi
}

# :command.usage
labman_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove - Remove object\n"
    echo

  else
    printf "labman remove - Remove object\n"
    echo

  fi

  printf "Alias: delete\n"
  echo

  printf "%s\n" "Usage:"
  printf "  labman remove COMMAND\n"
  printf "  labman remove [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Remove user\n" "user     "
  printf "  %s   Remove group\n" "group    "
  printf "  %s   Remove timegroup\n" "timegroup"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_remove_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove user - Remove user\n"
    echo

  else
    printf "labman remove user - Remove user\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman remove user USER\n"
  printf "  labman remove user --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User name\n"
    echo

  fi
}

# :command.usage
labman_remove_group_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove group - Remove group\n"
    echo

  else
    printf "labman remove group - Remove group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman remove group GROUP\n"
  printf "  labman remove group --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group name\n"
    echo

  fi
}

# :command.usage
labman_remove_timegroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman remove timegroup - Remove timegroup\n"
    echo

  else
    printf "labman remove timegroup - Remove timegroup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman remove timegroup TIMEGROUP\n"
  printf "  labman remove timegroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TIMEGROUP"
    printf "    Timegroup name\n"
    echo

  fi
}

# :command.usage
labman_addusertogroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman addusertogroup - Add user to group\n"
    echo

  else
    printf "labman addusertogroup - Add user to group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman addusertogroup USER GROUP\n"
  printf "  labman addusertogroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User to be added to group\n"
    echo

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group to add user to\n"
    echo

  fi
}

# :command.usage
labman_removeuserfromgroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman removeuserfromgroup - Remove user from group\n"
    echo

  else
    printf "labman removeuserfromgroup - Remove user from group\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman removeuserfromgroup USER GROUP\n"
  printf "  labman removeuserfromgroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User to be removed from group\n"
    echo

    # :argument.usage
    printf "  %s\n" "GROUP"
    printf "    Group to remove user from\n"
    echo

  fi
}

# :command.usage
labman_addusertotimegroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman addusertotimegroup - Add user to timegroup\n"
    echo

  else
    printf "labman addusertotimegroup - Add user to timegroup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman addusertotimegroup USER TIMEGROUP\n"
  printf "  labman addusertotimegroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User to be added to timegroup\n"
    echo

    # :argument.usage
    printf "  %s\n" "TIMEGROUP"
    printf "    Timegroup to add user to\n"
    echo

  fi
}

# :command.usage
labman_removeuserfromtimegroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman removeuserfromtimegroup - Remove user from timegroup\n"
    echo

  else
    printf "labman removeuserfromtimegroup - Remove user from timegroup\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman removeuserfromtimegroup USER TIMEGROUP\n"
  printf "  labman removeuserfromtimegroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    User to be removed from timegroup\n"
    echo

    # :argument.usage
    printf "  %s\n" "TIMEGROUP"
    printf "    Timegroup to remove user from\n"
    echo

  fi
}

# :command.usage
labman_set_allowedtime_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman set_allowedtime - Set allowed time for users or timegroups\n"
    echo

  else
    printf "labman set_allowedtime - Set allowed time for users or timegroups\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman set_allowedtime COMMAND\n"
  printf "  labman set_allowedtime [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Set allowed time for users\n" "user     "
  printf "  %s   Set allowed time for timegroups\n" "timegroup"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_set_allowedtime_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman set_allowedtime user - Set allowed time for users\n"
    echo

  else
    printf "labman set_allowedtime user - Set allowed time for users\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman set_allowedtime user USER ALLOWEDTIME [ALLOWEDDAYS] [OPTIONS]\n"
  printf "  labman set_allowedtime user --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--sync, -s"
    printf "    Generate and sync time.conf on managed machines\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    Affected user\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDTIME"
    printf "    Allowed time for user\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDDAYS"
    printf "    Allowed days\n"
    echo

  fi
}

# :command.usage
labman_set_allowedtime_timegroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman set_allowedtime timegroup - Set allowed time for timegroups\n"
    echo

  else
    printf "labman set_allowedtime timegroup - Set allowed time for timegroups\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman set_allowedtime timegroup TIMEGROUP ALLOWEDTIME [ALLOWEDDAYS] [OPTIONS]\n"
  printf "  labman set_allowedtime timegroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--sync, -s"
    printf "    Generate and sync time.conf on managed machines\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TIMEGROUP"
    printf "    Affected timegroup\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDTIME"
    printf "    Allowed time for timegroup\n"
    echo

    # :argument.usage
    printf "  %s\n" "ALLOWEDDAYS"
    printf "    Allowed days\n"
    echo

  fi
}

# :command.usage
labman_clear_allowedtime_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman clear_allowedtime - Clear allowed time for users or timegroups\n"
    echo

  else
    printf "labman clear_allowedtime - Clear allowed time for users or timegroups\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman clear_allowedtime COMMAND\n"
  printf "  labman clear_allowedtime [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Set allowed time for users\n" "user     "
  printf "  %s   Set allowed time for timegroups\n" "timegroup"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
labman_clear_allowedtime_user_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman clear_allowedtime user - Set allowed time for users\n"
    echo

  else
    printf "labman clear_allowedtime user - Set allowed time for users\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman clear_allowedtime user USER\n"
  printf "  labman clear_allowedtime user --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USER"
    printf "    Affected user\n"
    echo

  fi
}

# :command.usage
labman_clear_allowedtime_timegroup_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman clear_allowedtime timegroup - Set allowed time for timegroups\n"
    echo

  else
    printf "labman clear_allowedtime timegroup - Set allowed time for timegroups\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman clear_allowedtime timegroup TIMEGROUP\n"
  printf "  labman clear_allowedtime timegroup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TIMEGROUP"
    printf "    Affected timegroup\n"
    echo

  fi
}

# :command.usage
labman_generate_time_config_usage() {
  if [[ -n $long_usage ]]; then
    printf "labman generate_time_config - Generate time.conf settings based on database entries\n"
    echo

  else
    printf "labman generate_time_config - Generate time.conf settings based on database entries\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  labman generate_time_config [OPTIONS]\n"
  printf "  labman generate_time_config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--print, -p"
    printf "    Print generated time.conf output\n"
    echo

    # :flag.usage
    printf "  %s\n" "--sync, -s"
    printf "    Sync time.conf on managed machines\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/allowedtime.sh
get_users_with_allowedtime() {
  sqlite3 labman.db "select u.username from user_allowedtime u union select t.username from timegroup_user t;"
}

get_user_allowedtime() {
  sqlite3 labman.db "select allowedtime from user_allowedtime where username='$1';"
}

get_user_allowedtime_from_timegroups() {
  sqlite3 labman.db "select group_concat(allowedtime,'|') from timegroups t join timegroup_user tu on t.timegroup=tu.timegroup where username='$1';"
}

clear_user_allowedtime() {
  sqlite3 labman.db "delete from user_allowedtime where username='$1'"
}

clear_timegroup_allowedtime() {
  sqlite3 labman.db "update timegroups set allowedtime='Al0000-2400' where timegroup='$1'"
}

# src/lib/database.sh
initialize_database() {
    sqlite3 labman.db "create table user_allowedtime(username text unique, allowedtime text);"
    sqlite3 labman.db "create table timegroups(timegroup text unique, allowedtime text);"
    sqlite3 labman.db "create table timegroup_user(timegroup text, username text, unique(timegroup, username));"
}

# src/lib/groups.sh
add_group() {
    ldapaddgroup $1
}

add_user_to_group() {
  ldapaddusertogroup $1 $2
}

remove_group() {
    ldapdeletegroup $1
}

# src/lib/parsers.sh
parse_allowedtime() {
    local allowedtime="$1"
    local alloweddays="$2"

    local result="$allowedtime"
    if [[ ! "$allowedtime" =~ ^(always|never|[0-9]{4}-[0-9]{4})$ ]]; then
        result="ERROR"
    else
        if [ "$allowedtime" = "always" ] || [ "$allowedtime" = "never" ]; then
            result="0000-2400"
        fi

        if [[ $alloweddays ]]; then
            result="$alloweddays$result"
        else
            result="Al$result"
        fi

        if [ "$allowedtime" = "never" ]; then
            result="!$result"
        fi
    fi

    echo $result
}

parse_alloweddays() {
    local alloweddays="$1"

    if [[ ! "$alloweddays" =~ ^(Mo|Tu|We|Th|Fr|Sa|Su|Wk|Wd|Al)*$ ]]; then
        alloweddays="ERROR"
    fi

    echo $alloweddays
}

# src/lib/timegroup.sh
timegroup_exists() {
  timegroup_exists=$(sqlite3 labman.db "select 1 from timegroups where timegroup='$1'")

  if [[ ! $timegroup_exists ]]; then
    echo "No timegroup named $timegroup found in database"
    exit 1
  fi
}

add_timegroup() {
  sqlite3 labman.db "insert into timegroups values('$1', '$2');"
}

add_user_to_timegroup() {
  sqlite3 labman.db "insert into timegroup_user values('$2','$1')"
}

remove_timegroup() {
  sqlite3 labman.db "delete from timegroup_user where timegroup='$1';"
  sqlite3 labman.db "delete from timegroups where timegroup='$1';"
}

delete_user_from_timegroup() {
  sqlite3 labman.db "delete from timegroup_user where username='$1' and timegroup='$2'"
}

set_timegroup_allowedtime() {
  sqlite3 labman.db "insert or replace into timegroups values('$1','$2');"
}

# src/lib/users.sh
add_user() {
  ldapaddgroup $1
  ldapadduser $1 $1
  ldapaddusertogroup $1 administrators
}

remove_user() {
    sqlite3 labman.db "delete from user_allowedtime where username='$1';"
    ldapdeletegroup $1
    ldapdeleteuser $1
}

remove_user_from_group() {
    ldapdeleteuserfromgroup $1 $2
}

set_user_allowedtime() {
  sqlite3 labman.db "insert or replace into user_allowedtime values('$1','$2');"
}

# src/lib/utils.sh
generate_time_conf() {
    cp time.conf.sample time.conf

    for user in $(get_users_with_allowedtime); do
        timegroup_rules=$(get_user_allowedtime_from_timegroups $user)
        user_rules=$(get_user_allowedtime $user)

        rules=""
        if [[ $timegroup_rules && $user_rules ]]; then
            rules="$timegroup_rules|$user_rules"
        elif [[ $timegroup_rules ]]; then
            rules="$timegroup_rules"
        else
            rules="$user_rules"
        fi

        echo -e "*;*;$user;$rules" >> time.conf
    done

    echo -ne "# End of generated time.conf" >> time.conf

    echo "Updated time.conf file created"
}

synchronize_time_conf() {
    ansible-playbook playbooks/sync_time_conf.yml
}

# :command.command_functions
# :command.function
labman_init_command() {
  # src/init_command.sh
  echo "Checking required files"

  if [ ! -f "inventory.ini" ]; then
      echo "inventory.ini does not exist, try copying from the provided sample file and adjusting it."
      exit 1
  fi

  if [ ! -f "common_vars.yml" ]; then
      echo "common_vars.yml does not exist, try copying from the provided sample file and adjusting it."
      exit 1
  fi

  echo "Running LDAP setup from ansible"
  sudo ansible-playbook -b playbooks/setup_provider.yml

  echo "Initializing labman database"
  initialize_database

  echo "All done!"
}

# :command.function
labman_init_consumers_command() {
  # src/init_consumers_command.sh
  echo "Running LDAP consumer setup via ansible"
  ansible-playbook playbooks/setup_consumers.yml
  echo "All done!"
}

# :command.function
labman_add_user_command() {
  # src/add_user_command.sh
  user=${args[user]}

  add_user $user
}

# :command.function
labman_add_group_command() {
  # src/add_group_command.sh
  group=${args[group]}

  add_group $group

}

# :command.function
labman_add_timegroup_command() {
  # src/add_timegroup_command.sh
  timegroup=${args[timegroup]}
  allowedtime=${args[allowedtime]}
  alloweddays=${args[alloweddays]}

  if [ "$(parse_alloweddays $alloweddays)" == "ERROR" ]; then
      echo "Wrong alloweddays format: $alloweddays"
      echo "Try combinations of these instead: Mo Tu We Th Fr Sa Su Wk Wd Al"
      echo "Read more in the 'time.conf' man page"
      exit 1
  fi

  parsed_allowedtime=$(parse_allowedtime $allowedtime $alloweddays)

  if [ "$parsed_allowedtime" != "ERROR" ]; then
      add_timegroup $timegroup $parsed_allowedtime

      echo "Successfully added timegroup $timegroup to database"

      if [[ $alloweddays ]]; then
          echo "Successfully set timegroup $timegroup allowed time to $allowedtime on $alloweddays"
      else
          echo "Successfully set timegroup $timegroup allowed time to $allowedtime everyday"
      fi
  else
      echo "Wrong allowedtime format: $allowedtime"
      echo "Try these instead: always, never, 0800-1600(START-END)"
      exit 1
  fi
}

# :command.function
labman_remove_user_command() {
  # src/remove_user_command.sh
  user=${args[user]}

  remove_user $user
}

# :command.function
labman_remove_group_command() {
  # src/remove_group_command.sh
  group=${args[group]}

  remove_group $group

}

# :command.function
labman_remove_timegroup_command() {
  # src/remove_timegroup_command.sh
  timegroup=${args[timegroup]}

  remove_timegroup $timegroup

  echo "Successfully deleted timegroup $timegroup from database"
}

# :command.function
labman_addusertogroup_command() {
  # src/addusertogroup_command.sh
  user=${args[user]}
  group=${args[group]}

  add_user_to_group $user $group

}

# :command.function
labman_removeuserfromgroup_command() {
  # src/removeuserfromgroup_command.sh
  user=${args[user]}
  group=${args[group]}

  remove_user_from_group $user $group

}

# :command.function
labman_addusertotimegroup_command() {
  # src/addusertotimegroup_command.sh
  user=${args[user]}
  timegroup=${args[timegroup]}

  timegroup_exists $timegroup

  add_user_to_timegroup $user $timegroup
  echo "Successfully added user $user added to timegroup $timegroup"

}

# :command.function
labman_removeuserfromtimegroup_command() {
  # src/removeuserfromtimegroup_command.sh
  user=${args[user]}
  timegroup=${args[timegroup]}

  delete_user_from_timegroup $user $timegroup

  echo "Successfully deleted user $user from timegroup $timegroup"

}

# :command.function
labman_set_allowedtime_user_command() {
  # src/set_allowedtime_user_command.sh
  user=${args[user]}
  allowedtime=${args[allowedtime]}
  alloweddays=${args[alloweddays]}
  sync=${args[--sync]}

  if [ "$(parse_alloweddays $alloweddays)" == "ERROR" ]; then
      echo "Wrong alloweddays format: $alloweddays"
      echo "Try combinations of these instead: Mo Tu We Th Fr Sa Su Wk Wd Al"
      echo "Read more in the 'time.conf' man page"
      exit 1
  fi

  parsed_allowedtime=$(parse_allowedtime $allowedtime $alloweddays)

  if [ "$parsed_allowedtime" != "ERROR" ]; then
      set_user_allowedtime $user $parsed_allowedtime

      if [[ $alloweddays ]]; then
          echo "Successfully set user $user allowed time to $allowedtime on $alloweddays"
      else
          echo "Successfully set user $user allowed time to $allowedtime everyday"
      fi

      if [[ $sync ]]; then
          generate_time_conf
          synchronize_time_conf
      fi
  else
      echo "Wrong allowedtime format: $allowedtime"
      echo "Try these instead: always, never, 0800-1600(START-END)"
      exit 1
  fi
}

# :command.function
labman_set_allowedtime_timegroup_command() {
  # src/set_allowedtime_timegroup_command.sh
  timegroup=${args[timegroup]}
  allowedtime=${args[allowedtime]}
  alloweddays=${args[alloweddays]}
  sync=${args[--sync]}

  timegroup_exists $timegroup

  if [ "$(parse_alloweddays $alloweddays)" == "ERROR" ]; then
      echo "Wrong alloweddays format: $alloweddays"
      echo "Try combinations of these instead: Mo Tu We Th Fr Sa Su Wk Wd Al"
      echo "Read more in the 'time.conf' man page"
      exit 1
  fi

  parsed_allowedtime=$(parse_allowedtime $allowedtime $alloweddays)

  if [ "$parsed_allowedtime" != "ERROR" ]; then
      set_timegroup_allowedtime $timegroup $parsed_allowedtime

      if [[ $alloweddays ]]; then
          echo "Successfully set timegroup $timegroup allowed time to $allowedtime on $alloweddays"
      else
          echo "Successfully set timegroup $timegroup allowed time to $allowedtime everyday"
      fi

      if [[ $sync ]]; then
          generate_time_conf
          synchronize_time_conf
      fi
  else
      echo "Wrong allowedtime format: $allowedtime"
      echo "Try these instead: always, never, 0800-1600(START-END)"
      exit 1
  fi
}

# :command.function
labman_clear_allowedtime_user_command() {
  # src/clear_allowedtime_user_command.sh
  user=${args[user]}

  clear_user_allowedtime $user

  echo "Cleared user $user allowed time"
}

# :command.function
labman_clear_allowedtime_timegroup_command() {
  # src/clear_allowedtime_timegroup_command.sh
  timegroup=${args[timegroup]}

  timegroup_exists $timegroup

  clear_timegroup_allowedtime $timegroup

  echo "Cleared timegroup $timegroup allowed time"
}

# :command.function
labman_generate_time_config_command() {
  # src/generate_time_config_command.sh
  print=${args[--print]}
  sync=${args[--sync]}

  generate_time_conf

  if [[ $print ]]; then
      cat time.conf
      echo
  fi

  if [[ $sync ]]; then
      synchronize_time_conf
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        labman_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      labman_init_parse_requirements "$@"
      shift $#
      ;;

    init_consumers)
      action="init_consumers"
      shift
      labman_init_consumers_parse_requirements "$@"
      shift $#
      ;;

    add | create)
      action="add"
      shift
      labman_add_parse_requirements "$@"
      shift $#
      ;;

    remove | delete)
      action="remove"
      shift
      labman_remove_parse_requirements "$@"
      shift $#
      ;;

    addusertogroup)
      action="addusertogroup"
      shift
      labman_addusertogroup_parse_requirements "$@"
      shift $#
      ;;

    removeuserfromgroup)
      action="removeuserfromgroup"
      shift
      labman_removeuserfromgroup_parse_requirements "$@"
      shift $#
      ;;

    addusertotimegroup)
      action="addusertotimegroup"
      shift
      labman_addusertotimegroup_parse_requirements "$@"
      shift $#
      ;;

    removeuserfromtimegroup)
      action="removeuserfromtimegroup"
      shift
      labman_removeuserfromtimegroup_parse_requirements "$@"
      shift $#
      ;;

    set_allowedtime)
      action="set_allowedtime"
      shift
      labman_set_allowedtime_parse_requirements "$@"
      shift $#
      ;;

    clear_allowedtime)
      action="clear_allowedtime"
      shift
      labman_clear_allowedtime_parse_requirements "$@"
      shift $#
      ;;

    generate_time_config)
      action="generate_time_config"
      shift
      labman_generate_time_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ansible >/dev/null 2>&1; then
    deps['ansible']="$(command -v ansible | head -n1)"
  else
    printf "missing dependency: ansible\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_init_consumers_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_init_consumers_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action="init_consumers"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_add_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    user)
      action="user"
      shift
      labman_add_user_parse_requirements "$@"
      shift $#
      ;;

    group)
      action="group"
      shift
      labman_add_group_parse_requirements "$@"
      shift $#
      ;;

    timegroup)
      action="timegroup"
      shift
      labman_add_timegroup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_add_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_add_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add user"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman add user USER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_add_group_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_group_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add group"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman add group GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_add_timegroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_add_timegroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="add timegroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['timegroup']+x} ]]; then
          args['timegroup']=$1
          shift
        # :argument.case
        elif [[ -z ${args['allowedtime']+x} ]]; then
          args['allowedtime']=$1
          shift
        # :argument.case
        elif [[ -z ${args['alloweddays']+x} ]]; then
          args['alloweddays']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['timegroup']+x} ]]; then
    printf "missing required argument: TIMEGROUP\nusage: labman add timegroup TIMEGROUP ALLOWEDTIME [ALLOWEDDAYS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['allowedtime']+x} ]]; then
    printf "missing required argument: ALLOWEDTIME\nusage: labman add timegroup TIMEGROUP ALLOWEDTIME [ALLOWEDDAYS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_remove_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    user)
      action="user"
      shift
      labman_remove_user_parse_requirements "$@"
      shift $#
      ;;

    group)
      action="group"
      shift
      labman_remove_group_parse_requirements "$@"
      shift $#
      ;;

    timegroup)
      action="timegroup"
      shift
      labman_remove_timegroup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_remove_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_remove_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove user"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman remove user USER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_remove_group_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_group_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove group"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman remove group GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_remove_timegroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_remove_timegroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="remove timegroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['timegroup']+x} ]]; then
          args['timegroup']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['timegroup']+x} ]]; then
    printf "missing required argument: TIMEGROUP\nusage: labman remove timegroup TIMEGROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_addusertogroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_addusertogroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action="addusertogroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        # :argument.case
        elif [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman addusertogroup USER GROUP\n" >&2
    exit 1
  fi
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman addusertogroup USER GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_removeuserfromgroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_removeuserfromgroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action="removeuserfromgroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        # :argument.case
        elif [[ -z ${args['group']+x} ]]; then
          args['group']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman removeuserfromgroup USER GROUP\n" >&2
    exit 1
  fi
  if [[ -z ${args['group']+x} ]]; then
    printf "missing required argument: GROUP\nusage: labman removeuserfromgroup USER GROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_addusertotimegroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_addusertotimegroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action="addusertotimegroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        # :argument.case
        elif [[ -z ${args['timegroup']+x} ]]; then
          args['timegroup']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman addusertotimegroup USER TIMEGROUP\n" >&2
    exit 1
  fi
  if [[ -z ${args['timegroup']+x} ]]; then
    printf "missing required argument: TIMEGROUP\nusage: labman addusertotimegroup USER TIMEGROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_removeuserfromtimegroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_removeuserfromtimegroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action="removeuserfromtimegroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        # :argument.case
        elif [[ -z ${args['timegroup']+x} ]]; then
          args['timegroup']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman removeuserfromtimegroup USER TIMEGROUP\n" >&2
    exit 1
  fi
  if [[ -z ${args['timegroup']+x} ]]; then
    printf "missing required argument: TIMEGROUP\nusage: labman removeuserfromtimegroup USER TIMEGROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_set_allowedtime_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_set_allowedtime_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    user)
      action="user"
      shift
      labman_set_allowedtime_user_parse_requirements "$@"
      shift $#
      ;;

    timegroup)
      action="timegroup"
      shift
      labman_set_allowedtime_timegroup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_set_allowedtime_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_set_allowedtime_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_set_allowedtime_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="set_allowedtime user"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --sync | -s)

        # :flag.case_no_arg
        args['--sync']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        # :argument.case
        elif [[ -z ${args['allowedtime']+x} ]]; then
          args['allowedtime']=$1
          shift
        # :argument.case
        elif [[ -z ${args['alloweddays']+x} ]]; then
          args['alloweddays']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman set_allowedtime user USER ALLOWEDTIME [ALLOWEDDAYS] [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['allowedtime']+x} ]]; then
    printf "missing required argument: ALLOWEDTIME\nusage: labman set_allowedtime user USER ALLOWEDTIME [ALLOWEDDAYS] [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_set_allowedtime_timegroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_set_allowedtime_timegroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="set_allowedtime timegroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --sync | -s)

        # :flag.case_no_arg
        args['--sync']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['timegroup']+x} ]]; then
          args['timegroup']=$1
          shift
        # :argument.case
        elif [[ -z ${args['allowedtime']+x} ]]; then
          args['allowedtime']=$1
          shift
        # :argument.case
        elif [[ -z ${args['alloweddays']+x} ]]; then
          args['alloweddays']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['timegroup']+x} ]]; then
    printf "missing required argument: TIMEGROUP\nusage: labman set_allowedtime timegroup TIMEGROUP ALLOWEDTIME [ALLOWEDDAYS] [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['allowedtime']+x} ]]; then
    printf "missing required argument: ALLOWEDTIME\nusage: labman set_allowedtime timegroup TIMEGROUP ALLOWEDTIME [ALLOWEDDAYS] [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_clear_allowedtime_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_clear_allowedtime_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    user)
      action="user"
      shift
      labman_clear_allowedtime_user_parse_requirements "$@"
      shift $#
      ;;

    timegroup)
      action="timegroup"
      shift
      labman_clear_allowedtime_timegroup_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      labman_clear_allowedtime_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
labman_clear_allowedtime_user_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_clear_allowedtime_user_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="clear_allowedtime user"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['user']+x} ]]; then
          args['user']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['user']+x} ]]; then
    printf "missing required argument: USER\nusage: labman clear_allowedtime user USER\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_clear_allowedtime_timegroup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_clear_allowedtime_timegroup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="clear_allowedtime timegroup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['timegroup']+x} ]]; then
          args['timegroup']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['timegroup']+x} ]]; then
    printf "missing required argument: TIMEGROUP\nusage: labman clear_allowedtime timegroup TIMEGROUP\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
labman_generate_time_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        labman_generate_time_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v ldapadduser sqlite3 >/dev/null 2>&1; then
    deps['labman-utils']="$(command -v ldapadduser sqlite3 | head -n1)"
  else
    printf "missing dependency: labman-utils (ldapadduser/sqlite3)\n" >&2
    printf "%s\n" "Run init command" >&2
    exit 1
  fi

  # :command.command_filter
  action="generate_time_config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --print | -p)

        # :flag.case_no_arg
        args['--print']=1
        shift
        ;;

      # :flag.case
      --sync | -s)

        # :flag.case_no_arg
        args['--sync']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") labman_init_command ;;
    "init_consumers") labman_init_consumers_command ;;
    "add") labman_add_command ;;
    "add user") labman_add_user_command ;;
    "add group") labman_add_group_command ;;
    "add timegroup") labman_add_timegroup_command ;;
    "remove") labman_remove_command ;;
    "remove user") labman_remove_user_command ;;
    "remove group") labman_remove_group_command ;;
    "remove timegroup") labman_remove_timegroup_command ;;
    "addusertogroup") labman_addusertogroup_command ;;
    "removeuserfromgroup") labman_removeuserfromgroup_command ;;
    "addusertotimegroup") labman_addusertotimegroup_command ;;
    "removeuserfromtimegroup") labman_removeuserfromtimegroup_command ;;
    "set_allowedtime") labman_set_allowedtime_command ;;
    "set_allowedtime user") labman_set_allowedtime_user_command ;;
    "set_allowedtime timegroup") labman_set_allowedtime_timegroup_command ;;
    "clear_allowedtime") labman_clear_allowedtime_command ;;
    "clear_allowedtime user") labman_clear_allowedtime_user_command ;;
    "clear_allowedtime timegroup") labman_clear_allowedtime_timegroup_command ;;
    "generate_time_config") labman_generate_time_config_command ;;
  esac
}

initialize
run "$@"
